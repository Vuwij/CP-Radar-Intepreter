<!-- HTML header for doxygen 1.8.12-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.12"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>pymoduleconnector: pymoduleconnector.moduleconnectorwrapper.PyXEP Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
  <div id="top"><!-- do not remove this div, it is closed by doxygen! -->
    <!-- Platform title -->
    <div class="page-title-bar container-fluid">
      <div id="projectalign" class="row">
        <div id="projectname" class="col-sm-12">pymoduleconnector
          &#160;<span id="projectnumber">1.1.5</span>
        </div>
        <div id="projectbrief" class="col-sm-12">A Python wrapper for XeThru ModuleConnector</div>
      </div>
    </div>
    <div class="topbar">
      <div class="container">
        <div id="titlearea">
          <div class="xethru-logo">
            <img src="xethru-logo_220x55HD.png" alt="Novelda XeThru web site" id="logo-image" />
          </div>
        </div>
        <!-- end header part -->
        <!-- Generated by Doxygen 1.8.12 -->
        <!--BEGIN MAIN-NAV AND SEARCHENGINE-->
        <div id="main-nav"></div>
        <!--END MAIN-NAV AND SEARCHENGINE-->
      </div>
    </div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>pymoduleconnector</b></li><li class="navelem"><b>moduleconnectorwrapper</b></li><li class="navelem"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml">PyXEP</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">pymoduleconnector.moduleconnectorwrapper.PyXEP Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>C++ includes: PyXEP.hpp.  
 <a href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a4e9abf9515df42cbec7e10dac634b5a2"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml#a4e9abf9515df42cbec7e10dac634b5a2">__init__</a> (self, radar_interface)</td></tr>
<tr class="memdesc:a4e9abf9515df42cbec7e10dac634b5a2"><td class="mdescLeft">&#160;</td><td class="mdescRight"><b>init</b>(XeThru::PyXEP self, RadarInterface &amp; radar_interface) -&gt; <a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml" title="C++ includes: PyXEP.hpp. ">PyXEP</a>  <a href="#a4e9abf9515df42cbec7e10dac634b5a2">More...</a><br /></td></tr>
<tr class="separator:a4e9abf9515df42cbec7e10dac634b5a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a51dd6c5bb894e0a018e31f36e7db4abf"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml#a51dd6c5bb894e0a018e31f36e7db4abf">module_reset</a> (self)</td></tr>
<tr class="memdesc:a51dd6c5bb894e0a018e31f36e7db4abf"><td class="mdescLeft">&#160;</td><td class="mdescRight">module_reset(PyXEP self)  <a href="#a51dd6c5bb894e0a018e31f36e7db4abf">More...</a><br /></td></tr>
<tr class="separator:a51dd6c5bb894e0a018e31f36e7db4abf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40dc0d608675762cd9a9b8f9feb80e4b"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml#a40dc0d608675762cd9a9b8f9feb80e4b">get_system_info</a> (self, info_code)</td></tr>
<tr class="memdesc:a40dc0d608675762cd9a9b8f9feb80e4b"><td class="mdescLeft">&#160;</td><td class="mdescRight">get_system_info(PyXEP self, uint8_t info_code) -&gt; std::string  <a href="#a40dc0d608675762cd9a9b8f9feb80e4b">More...</a><br /></td></tr>
<tr class="separator:a40dc0d608675762cd9a9b8f9feb80e4b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8781a006a81ad3fc66dd8f1001222b0a"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml#a8781a006a81ad3fc66dd8f1001222b0a">ping</a> (self)</td></tr>
<tr class="memdesc:a8781a006a81ad3fc66dd8f1001222b0a"><td class="mdescLeft">&#160;</td><td class="mdescRight">ping(PyXEP self) -&gt; uint32_t  <a href="#a8781a006a81ad3fc66dd8f1001222b0a">More...</a><br /></td></tr>
<tr class="separator:a8781a006a81ad3fc66dd8f1001222b0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a68459e2f2ee2ee0894d7df61c1757c6c"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml#a68459e2f2ee2ee0894d7df61c1757c6c">x4driver_set_fps</a> (self, fps)</td></tr>
<tr class="memdesc:a68459e2f2ee2ee0894d7df61c1757c6c"><td class="mdescLeft">&#160;</td><td class="mdescRight">x4driver_set_fps(PyXEP self, float fps)  <a href="#a68459e2f2ee2ee0894d7df61c1757c6c">More...</a><br /></td></tr>
<tr class="separator:a68459e2f2ee2ee0894d7df61c1757c6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5722506858ef149aa6378ccc4198f6a8"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml#a5722506858ef149aa6378ccc4198f6a8">x4driver_get_fps</a> (self)</td></tr>
<tr class="memdesc:a5722506858ef149aa6378ccc4198f6a8"><td class="mdescLeft">&#160;</td><td class="mdescRight">x4driver_get_fps(PyXEP self) -&gt; float  <a href="#a5722506858ef149aa6378ccc4198f6a8">More...</a><br /></td></tr>
<tr class="separator:a5722506858ef149aa6378ccc4198f6a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a7d6315f79e9e12995a884d393152b9"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml#a7a7d6315f79e9e12995a884d393152b9">x4driver_set_enable</a> (self, value)</td></tr>
<tr class="memdesc:a7a7d6315f79e9e12995a884d393152b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">x4driver_set_enable(PyXEP self, uint8_t value)  <a href="#a7a7d6315f79e9e12995a884d393152b9">More...</a><br /></td></tr>
<tr class="separator:a7a7d6315f79e9e12995a884d393152b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e0428c94e707a3bd1dd3d42c372df51"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml#a3e0428c94e707a3bd1dd3d42c372df51">x4driver_init</a> (self)</td></tr>
<tr class="memdesc:a3e0428c94e707a3bd1dd3d42c372df51"><td class="mdescLeft">&#160;</td><td class="mdescRight">x4driver_init(PyXEP self)  <a href="#a3e0428c94e707a3bd1dd3d42c372df51">More...</a><br /></td></tr>
<tr class="separator:a3e0428c94e707a3bd1dd3d42c372df51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae645c78af02a359c9f3112a664f509ca"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml#ae645c78af02a359c9f3112a664f509ca">x4driver_set_iterations</a> (self, iterations)</td></tr>
<tr class="memdesc:ae645c78af02a359c9f3112a664f509ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">x4driver_set_iterations(PyXEP self, uint32_t iterations)  <a href="#ae645c78af02a359c9f3112a664f509ca">More...</a><br /></td></tr>
<tr class="separator:ae645c78af02a359c9f3112a664f509ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb925124cc48218a36c4085c5fdb83f9"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml#adb925124cc48218a36c4085c5fdb83f9">x4driver_set_pulses_per_step</a> (self, pps)</td></tr>
<tr class="memdesc:adb925124cc48218a36c4085c5fdb83f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">x4driver_set_pulses_per_step(PyXEP self, uint32_t pps)  <a href="#adb925124cc48218a36c4085c5fdb83f9">More...</a><br /></td></tr>
<tr class="separator:adb925124cc48218a36c4085c5fdb83f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f1a638104855b57c4351a972306b56f"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml#a1f1a638104855b57c4351a972306b56f">x4driver_set_dac_step</a> (self, dac_step)</td></tr>
<tr class="memdesc:a1f1a638104855b57c4351a972306b56f"><td class="mdescLeft">&#160;</td><td class="mdescRight">x4driver_set_dac_step(PyXEP self, uint8_t dac_step)  <a href="#a1f1a638104855b57c4351a972306b56f">More...</a><br /></td></tr>
<tr class="separator:a1f1a638104855b57c4351a972306b56f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc715caef2f826b94ef3287aa153e79e"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml#abc715caef2f826b94ef3287aa153e79e">x4driver_set_dac_min</a> (self, dac_min)</td></tr>
<tr class="memdesc:abc715caef2f826b94ef3287aa153e79e"><td class="mdescLeft">&#160;</td><td class="mdescRight">x4driver_set_dac_min(PyXEP self, uint32_t dac_min)  <a href="#abc715caef2f826b94ef3287aa153e79e">More...</a><br /></td></tr>
<tr class="separator:abc715caef2f826b94ef3287aa153e79e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec3612495db6fff46220706c4f9c2f4d"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml#aec3612495db6fff46220706c4f9c2f4d">x4driver_set_dac_max</a> (self, dac_max)</td></tr>
<tr class="memdesc:aec3612495db6fff46220706c4f9c2f4d"><td class="mdescLeft">&#160;</td><td class="mdescRight">x4driver_set_dac_max(PyXEP self, uint32_t dac_max)  <a href="#aec3612495db6fff46220706c4f9c2f4d">More...</a><br /></td></tr>
<tr class="separator:aec3612495db6fff46220706c4f9c2f4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abcc14bad0b9fa3390d79d42548473afe"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml#abcc14bad0b9fa3390d79d42548473afe">x4driver_set_tx_power</a> (self, tx_power)</td></tr>
<tr class="memdesc:abcc14bad0b9fa3390d79d42548473afe"><td class="mdescLeft">&#160;</td><td class="mdescRight">x4driver_set_tx_power(PyXEP self, uint8_t tx_power)  <a href="#abcc14bad0b9fa3390d79d42548473afe">More...</a><br /></td></tr>
<tr class="separator:abcc14bad0b9fa3390d79d42548473afe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82524a9b27ab7552d999aa4b81c38cdb"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml#a82524a9b27ab7552d999aa4b81c38cdb">x4driver_set_downconversion</a> (self, enable)</td></tr>
<tr class="memdesc:a82524a9b27ab7552d999aa4b81c38cdb"><td class="mdescLeft">&#160;</td><td class="mdescRight">x4driver_set_downconversion(PyXEP self, uint8_t enable)  <a href="#a82524a9b27ab7552d999aa4b81c38cdb">More...</a><br /></td></tr>
<tr class="separator:a82524a9b27ab7552d999aa4b81c38cdb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3ce265886f14f7f376e5d46b0231e0f"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml#ab3ce265886f14f7f376e5d46b0231e0f">x4driver_set_frame_area</a> (self, start, end)</td></tr>
<tr class="memdesc:ab3ce265886f14f7f376e5d46b0231e0f"><td class="mdescLeft">&#160;</td><td class="mdescRight">x4driver_set_frame_area(PyXEP self, float start, float end)  <a href="#ab3ce265886f14f7f376e5d46b0231e0f">More...</a><br /></td></tr>
<tr class="separator:ab3ce265886f14f7f376e5d46b0231e0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2cea78ca0d1d5f0da052f8c43e3de561"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml#a2cea78ca0d1d5f0da052f8c43e3de561">x4driver_get_frame_area</a> (self)</td></tr>
<tr class="memdesc:a2cea78ca0d1d5f0da052f8c43e3de561"><td class="mdescLeft">&#160;</td><td class="mdescRight">x4driver_get_frame_area(PyXEP self) -&gt; <a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_frame_area.xhtml" title="FrameArea. ">FrameArea</a>  <a href="#a2cea78ca0d1d5f0da052f8c43e3de561">More...</a><br /></td></tr>
<tr class="separator:a2cea78ca0d1d5f0da052f8c43e3de561"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1fba61764d7abd07669e750cfe9e6981"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml#a1fba61764d7abd07669e750cfe9e6981">x4driver_set_frame_area_offset</a> (self, offset)</td></tr>
<tr class="memdesc:a1fba61764d7abd07669e750cfe9e6981"><td class="mdescLeft">&#160;</td><td class="mdescRight">x4driver_set_frame_area_offset(PyXEP self, float offset)  <a href="#a1fba61764d7abd07669e750cfe9e6981">More...</a><br /></td></tr>
<tr class="separator:a1fba61764d7abd07669e750cfe9e6981"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adce1046f11e71389f7ee140e412f3cce"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml#adce1046f11e71389f7ee140e412f3cce">x4driver_get_frame_area_offset</a> (self)</td></tr>
<tr class="memdesc:adce1046f11e71389f7ee140e412f3cce"><td class="mdescLeft">&#160;</td><td class="mdescRight">x4driver_get_frame_area_offset(PyXEP self) -&gt; float  <a href="#adce1046f11e71389f7ee140e412f3cce">More...</a><br /></td></tr>
<tr class="separator:adce1046f11e71389f7ee140e412f3cce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d091bb042a22eb510ef2b3bb68fa7f4"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml#a8d091bb042a22eb510ef2b3bb68fa7f4">x4driver_set_tx_center_frequency</a> (self, tx_frequency)</td></tr>
<tr class="memdesc:a8d091bb042a22eb510ef2b3bb68fa7f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">x4driver_set_tx_center_frequency(PyXEP self, uint8_t tx_frequency)  <a href="#a8d091bb042a22eb510ef2b3bb68fa7f4">More...</a><br /></td></tr>
<tr class="separator:a8d091bb042a22eb510ef2b3bb68fa7f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a81a294b61ffa595ba5d3a36ca7aaa83d"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml#a81a294b61ffa595ba5d3a36ca7aaa83d">x4driver_set_spi_register</a> (self, address, value)</td></tr>
<tr class="memdesc:a81a294b61ffa595ba5d3a36ca7aaa83d"><td class="mdescLeft">&#160;</td><td class="mdescRight">x4driver_set_spi_register(PyXEP self, uint8_t address, uint8_t value)  <a href="#a81a294b61ffa595ba5d3a36ca7aaa83d">More...</a><br /></td></tr>
<tr class="separator:a81a294b61ffa595ba5d3a36ca7aaa83d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a905538453d91219746b56abbfc154155"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml#a905538453d91219746b56abbfc154155">x4driver_get_spi_register</a> (self, address)</td></tr>
<tr class="memdesc:a905538453d91219746b56abbfc154155"><td class="mdescLeft">&#160;</td><td class="mdescRight">x4driver_get_spi_register(PyXEP self, uint8_t address) -&gt; uint8_t  <a href="#a905538453d91219746b56abbfc154155">More...</a><br /></td></tr>
<tr class="separator:a905538453d91219746b56abbfc154155"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac94aba38f8e7df5c5cb16a4378e37037"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml#ac94aba38f8e7df5c5cb16a4378e37037">x4driver_set_pif_register</a> (self, address, value)</td></tr>
<tr class="memdesc:ac94aba38f8e7df5c5cb16a4378e37037"><td class="mdescLeft">&#160;</td><td class="mdescRight">x4driver_set_pif_register(PyXEP self, uint8_t address, uint8_t value)  <a href="#ac94aba38f8e7df5c5cb16a4378e37037">More...</a><br /></td></tr>
<tr class="separator:ac94aba38f8e7df5c5cb16a4378e37037"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a901c25f7671004540dce574f1489a265"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml#a901c25f7671004540dce574f1489a265">x4driver_get_pif_register</a> (self, address)</td></tr>
<tr class="memdesc:a901c25f7671004540dce574f1489a265"><td class="mdescLeft">&#160;</td><td class="mdescRight">x4driver_get_pif_register(PyXEP self, uint8_t address) -&gt; uint8_t  <a href="#a901c25f7671004540dce574f1489a265">More...</a><br /></td></tr>
<tr class="separator:a901c25f7671004540dce574f1489a265"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f1227b5306335abd50e4b41d6bc10f8"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml#a2f1227b5306335abd50e4b41d6bc10f8">x4driver_set_xif_register</a> (self, address, value)</td></tr>
<tr class="memdesc:a2f1227b5306335abd50e4b41d6bc10f8"><td class="mdescLeft">&#160;</td><td class="mdescRight">x4driver_set_xif_register(PyXEP self, uint8_t address, uint8_t value)  <a href="#a2f1227b5306335abd50e4b41d6bc10f8">More...</a><br /></td></tr>
<tr class="separator:a2f1227b5306335abd50e4b41d6bc10f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aace917a03ff13b718feac514d3944f97"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml#aace917a03ff13b718feac514d3944f97">x4driver_get_xif_register</a> (self, address)</td></tr>
<tr class="memdesc:aace917a03ff13b718feac514d3944f97"><td class="mdescLeft">&#160;</td><td class="mdescRight">x4driver_get_xif_register(PyXEP self, uint8_t address) -&gt; uint8_t  <a href="#aace917a03ff13b718feac514d3944f97">More...</a><br /></td></tr>
<tr class="separator:aace917a03ff13b718feac514d3944f97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1107468d06783110614842debf976d46"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml#a1107468d06783110614842debf976d46">x4driver_set_prf_div</a> (self, prf_div)</td></tr>
<tr class="memdesc:a1107468d06783110614842debf976d46"><td class="mdescLeft">&#160;</td><td class="mdescRight">x4driver_set_prf_div(PyXEP self, uint8_t prf_div)  <a href="#a1107468d06783110614842debf976d46">More...</a><br /></td></tr>
<tr class="separator:a1107468d06783110614842debf976d46"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc1d77e574da6625e2599f4e2fa3f919"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml#adc1d77e574da6625e2599f4e2fa3f919">x4driver_get_prf_div</a> (self)</td></tr>
<tr class="memdesc:adc1d77e574da6625e2599f4e2fa3f919"><td class="mdescLeft">&#160;</td><td class="mdescRight">x4driver_get_prf_div(PyXEP self) -&gt; uint8_t  <a href="#adc1d77e574da6625e2599f4e2fa3f919">More...</a><br /></td></tr>
<tr class="separator:adc1d77e574da6625e2599f4e2fa3f919"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1cfd6f8dbeabdf195eea0be7b0c48b4"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml#af1cfd6f8dbeabdf195eea0be7b0c48b4">set_iopin_control</a> (self, pin_id, pin_setup, pin_feature)</td></tr>
<tr class="memdesc:af1cfd6f8dbeabdf195eea0be7b0c48b4"><td class="mdescLeft">&#160;</td><td class="mdescRight">set_iopin_control(PyXEP self, uint32_t pin_id, uint32_t pin_setup, uint32_t pin_feature)  <a href="#af1cfd6f8dbeabdf195eea0be7b0c48b4">More...</a><br /></td></tr>
<tr class="separator:af1cfd6f8dbeabdf195eea0be7b0c48b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f41fd99adcb1f5f46b6f91e7156c30f"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml#a4f41fd99adcb1f5f46b6f91e7156c30f">set_iopin_value</a> (self, pin_id, pin_value)</td></tr>
<tr class="memdesc:a4f41fd99adcb1f5f46b6f91e7156c30f"><td class="mdescLeft">&#160;</td><td class="mdescRight">set_iopin_value(PyXEP self, uint32_t pin_id, uint32_t pin_value)  <a href="#a4f41fd99adcb1f5f46b6f91e7156c30f">More...</a><br /></td></tr>
<tr class="separator:a4f41fd99adcb1f5f46b6f91e7156c30f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae820fc6d6ae63288451fb850cb665854"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml#ae820fc6d6ae63288451fb850cb665854">get_iopin_value</a> (self, pin_id)</td></tr>
<tr class="memdesc:ae820fc6d6ae63288451fb850cb665854"><td class="mdescLeft">&#160;</td><td class="mdescRight">get_iopin_value(PyXEP self, uint32_t pin_id) -&gt; uint32_t  <a href="#ae820fc6d6ae63288451fb850cb665854">More...</a><br /></td></tr>
<tr class="separator:ae820fc6d6ae63288451fb850cb665854"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5cf54084f1c4338d35624dda98b5170"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml#ab5cf54084f1c4338d35624dda98b5170">peek_message_data_float</a> (self)</td></tr>
<tr class="memdesc:ab5cf54084f1c4338d35624dda98b5170"><td class="mdescLeft">&#160;</td><td class="mdescRight">peek_message_data_float(PyXEP self) -&gt; int  <a href="#ab5cf54084f1c4338d35624dda98b5170">More...</a><br /></td></tr>
<tr class="separator:ab5cf54084f1c4338d35624dda98b5170"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad59080c40089562c07b22667a383f256"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml#ad59080c40089562c07b22667a383f256">read_message_data_float</a> (self)</td></tr>
<tr class="memdesc:ad59080c40089562c07b22667a383f256"><td class="mdescLeft">&#160;</td><td class="mdescRight">read_message_data_float(PyXEP self) -&gt; DataFloat  <a href="#ad59080c40089562c07b22667a383f256">More...</a><br /></td></tr>
<tr class="separator:ad59080c40089562c07b22667a383f256"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d8df393faf08d112804b3dc964edd23"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml#a1d8df393faf08d112804b3dc964edd23">peek_message_data_string</a> (self)</td></tr>
<tr class="memdesc:a1d8df393faf08d112804b3dc964edd23"><td class="mdescLeft">&#160;</td><td class="mdescRight">peek_message_data_string(PyXEP self) -&gt; int  <a href="#a1d8df393faf08d112804b3dc964edd23">More...</a><br /></td></tr>
<tr class="separator:a1d8df393faf08d112804b3dc964edd23"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a009858962f1c1a7d68235f155de10af1"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml#a009858962f1c1a7d68235f155de10af1">read_message_data_string</a> (self, content_id, info, data)</td></tr>
<tr class="memdesc:a009858962f1c1a7d68235f155de10af1"><td class="mdescLeft">&#160;</td><td class="mdescRight">read_message_data_string(PyXEP self, uint32_t * content_id, uint32_t * info, std::string * data) -&gt; int  <a href="#a009858962f1c1a7d68235f155de10af1">More...</a><br /></td></tr>
<tr class="separator:a009858962f1c1a7d68235f155de10af1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab285a7d6d716a7b7d80be10d1e034829"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml#ab285a7d6d716a7b7d80be10d1e034829">peek_message_system</a> (self)</td></tr>
<tr class="memdesc:ab285a7d6d716a7b7d80be10d1e034829"><td class="mdescLeft">&#160;</td><td class="mdescRight">peek_message_system(PyXEP self) -&gt; int  <a href="#ab285a7d6d716a7b7d80be10d1e034829">More...</a><br /></td></tr>
<tr class="separator:ab285a7d6d716a7b7d80be10d1e034829"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a464fd568aeafaabf14099654f3305e31"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml#a464fd568aeafaabf14099654f3305e31">read_message_system</a> (self)</td></tr>
<tr class="memdesc:a464fd568aeafaabf14099654f3305e31"><td class="mdescLeft">&#160;</td><td class="mdescRight">read_message_system(PyXEP self) -&gt; uint32_t  <a href="#a464fd568aeafaabf14099654f3305e31">More...</a><br /></td></tr>
<tr class="separator:a464fd568aeafaabf14099654f3305e31"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr class="memitem:ae6f541315166995bc919f85f29108beb"><td class="memItemLeft" align="right" valign="top"><a id="ae6f541315166995bc919f85f29108beb"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>this</b></td></tr>
<tr class="separator:ae6f541315166995bc919f85f29108beb"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>C++ includes: PyXEP.hpp. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a4e9abf9515df42cbec7e10dac634b5a2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4e9abf9515df42cbec7e10dac634b5a2">&sect;&nbsp;</a></span>__init__()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyXEP.__init__ </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>radar_interface</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p><b>init</b>(XeThru::PyXEP self, RadarInterface &amp; radar_interface) -&gt; <a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x_e_p.xhtml" title="C++ includes: PyXEP.hpp. ">PyXEP</a> </p>
<p>XEP constructor.</p>
<h2>Returns </h2>
<p>instance </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ae820fc6d6ae63288451fb850cb665854"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae820fc6d6ae63288451fb850cb665854">&sect;&nbsp;</a></span>get_iopin_value()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyXEP.get_iopin_value </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>pin_id</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>get_iopin_value(PyXEP self, uint32_t pin_id) -&gt; uint32_t </p>
<p>Read IO pin level or value.</p>
<h2>Returns </h2>
<p>value io pin value </p>

</div>
</div>
<a id="a40dc0d608675762cd9a9b8f9feb80e4b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a40dc0d608675762cd9a9b8f9feb80e4b">&sect;&nbsp;</a></span>get_system_info()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyXEP.get_system_info </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>info_code</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>get_system_info(PyXEP self, uint8_t info_code) -&gt; std::string </p>
<p>Returns a string containing system information given by infocode: XTS_SSIC_FIRMWAREID = 0x02 -&gt; Returns the installed Firmware ID, "XEP" XTS_SSIC_VERSION = 0x03 -&gt; Returns the installed Firmware Version.</p>
<p>As viewed from the "highest" level of the software. XTS_SSIC_BUILD = 0x04 -&gt; Returns information of the SW Build installed on the device XTS_SSIC_VERSIONLIST = 0x07 -&gt; Returns ID and version of all components. Calls all components and compound a string. E.g. "XEP:2.3.4.5;X4C51:1.0.0.0" </p>

</div>
</div>
<a id="a51dd6c5bb894e0a018e31f36e7db4abf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a51dd6c5bb894e0a018e31f36e7db4abf">&sect;&nbsp;</a></span>module_reset()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyXEP.module_reset </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>module_reset(PyXEP self) </p>
<p>Resets module. </p>

</div>
</div>
<a id="ab5cf54084f1c4338d35624dda98b5170"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab5cf54084f1c4338d35624dda98b5170">&sect;&nbsp;</a></span>peek_message_data_float()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyXEP.peek_message_data_float </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>peek_message_data_float(PyXEP self) -&gt; int </p>
<p>Returns number of data float packets in internal queue.</p>
<h2>Returns </h2>
<p>Returns number of data float packets in internal queue </p>

</div>
</div>
<a id="a1d8df393faf08d112804b3dc964edd23"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1d8df393faf08d112804b3dc964edd23">&sect;&nbsp;</a></span>peek_message_data_string()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyXEP.peek_message_data_string </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>peek_message_data_string(PyXEP self) -&gt; int </p>
<p>Returns number of data string packets in internal queue.</p>
<h2>Returns </h2>
<p>Returns number of data string packets in internal queue. </p>

</div>
</div>
<a id="ab285a7d6d716a7b7d80be10d1e034829"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab285a7d6d716a7b7d80be10d1e034829">&sect;&nbsp;</a></span>peek_message_system()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyXEP.peek_message_system </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>peek_message_system(PyXEP self) -&gt; int </p>
<p>Sets max number of messages to store in internal data float queue.</p>
<h2>Returns </h2>
<p>Returns number of system packets in internal queue </p>

</div>
</div>
<a id="a8781a006a81ad3fc66dd8f1001222b0a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8781a006a81ad3fc66dd8f1001222b0a">&sect;&nbsp;</a></span>ping()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyXEP.ping </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>ping(PyXEP self) -&gt; uint32_t </p>
<p>Send ping to module in order to validate that connection both ways is OK.</p>
<h2>Returns </h2>
<p>pong </p>

</div>
</div>
<a id="ad59080c40089562c07b22667a383f256"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad59080c40089562c07b22667a383f256">&sect;&nbsp;</a></span>read_message_data_float()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyXEP.read_message_data_float </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>read_message_data_float(PyXEP self) -&gt; DataFloat </p>
<p>Reads a single data float message from internal queue.</p>
<h2>Returns </h2>
<p>data data float message </p>

</div>
</div>
<a id="a009858962f1c1a7d68235f155de10af1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a009858962f1c1a7d68235f155de10af1">&sect;&nbsp;</a></span>read_message_data_string()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyXEP.read_message_data_string </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>content_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>data</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>read_message_data_string(PyXEP self, uint32_t * content_id, uint32_t * info, std::string * data) -&gt; int </p>
<p>Reads a single data string message from internal queue.</p>
<h2>Returns </h2>
<p>execution status </p>

</div>
</div>
<a id="a464fd568aeafaabf14099654f3305e31"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a464fd568aeafaabf14099654f3305e31">&sect;&nbsp;</a></span>read_message_system()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyXEP.read_message_system </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>read_message_system(PyXEP self) -&gt; uint32_t </p>
<p>Reads a single data system message from internal queue.</p>
<h2>Returns </h2>
<p>system package </p>

</div>
</div>
<a id="af1cfd6f8dbeabdf195eea0be7b0c48b4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af1cfd6f8dbeabdf195eea0be7b0c48b4">&sect;&nbsp;</a></span>set_iopin_control()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyXEP.set_iopin_control </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>pin_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>pin_setup</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>pin_feature</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>set_iopin_control(PyXEP self, uint32_t pin_id, uint32_t pin_setup, uint32_t pin_feature) </p>
<p>Enable or disable GPIO feature.</p>
<p>pin_id = 0 : all pins pin_id != 0 : designated pin pin_feature = 0 : disabled - pin tri-stated / input (TBD) pin_feature = 1 : default pin_feature &gt; 1 : designated feature Pin setup: 0 = input 1 = output Pin feature: 0 = Disable all iopin features (not available, will return error) 1 = Configure according to datasheet default (not available, will return error) 2 = Passive - Set and get iopin level from host </p>

</div>
</div>
<a id="a4f41fd99adcb1f5f46b6f91e7156c30f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4f41fd99adcb1f5f46b6f91e7156c30f">&sect;&nbsp;</a></span>set_iopin_value()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyXEP.set_iopin_value </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>pin_id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>pin_value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>set_iopin_value(PyXEP self, uint32_t pin_id, uint32_t pin_value) </p>
<p>If IO pin control is used to set pin_id as output, the pin level or value will be set to pin_value. </p>

</div>
</div>
<a id="a5722506858ef149aa6378ccc4198f6a8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5722506858ef149aa6378ccc4198f6a8">&sect;&nbsp;</a></span>x4driver_get_fps()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyXEP.x4driver_get_fps </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>x4driver_get_fps(PyXEP self) -&gt; float </p>
<p>Gets configured FPS.</p>
<h2>Returns </h2>
<p>fps </p>

</div>
</div>
<a id="a2cea78ca0d1d5f0da052f8c43e3de561"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2cea78ca0d1d5f0da052f8c43e3de561">&sect;&nbsp;</a></span>x4driver_get_frame_area()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyXEP.x4driver_get_frame_area </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>x4driver_get_frame_area(PyXEP self) -&gt; <a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_frame_area.xhtml" title="FrameArea. ">FrameArea</a> </p>
<p>Get frame area zone.</p>
<h2>Returns </h2>
<p><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_frame_area.xhtml" title="FrameArea. ">FrameArea</a> </p>

</div>
</div>
<a id="adce1046f11e71389f7ee140e412f3cce"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adce1046f11e71389f7ee140e412f3cce">&sect;&nbsp;</a></span>x4driver_get_frame_area_offset()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyXEP.x4driver_get_frame_area_offset </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>x4driver_get_frame_area_offset(PyXEP self) -&gt; float </p>
<p>Offset to adjust frame area reference depending on module product.</p>
<h2>Returns </h2>
<p>offset frame area offset </p>

</div>
</div>
<a id="a901c25f7671004540dce574f1489a265"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a901c25f7671004540dce574f1489a265">&sect;&nbsp;</a></span>x4driver_get_pif_register()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyXEP.x4driver_get_pif_register </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>address</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>x4driver_get_pif_register(PyXEP self, uint8_t address) -&gt; uint8_t </p>
<p>Gets PIF register value.</p>
<h2>Returns </h2>
<p>register register value </p>

</div>
</div>
<a id="adc1d77e574da6625e2599f4e2fa3f919"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adc1d77e574da6625e2599f4e2fa3f919">&sect;&nbsp;</a></span>x4driver_get_prf_div()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyXEP.x4driver_get_prf_div </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>x4driver_get_prf_div(PyXEP self) -&gt; uint8_t </p>
<p>Gets Pulse Repetition Frequency(PRF) divider.</p>
<h2>Returns </h2>
<p>register register value </p>

</div>
</div>
<a id="a905538453d91219746b56abbfc154155"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a905538453d91219746b56abbfc154155">&sect;&nbsp;</a></span>x4driver_get_spi_register()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyXEP.x4driver_get_spi_register </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>address</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>x4driver_get_spi_register(PyXEP self, uint8_t address) -&gt; uint8_t </p>
<p>Get spi register on radar chip.</p>
<h2>Returns </h2>
<p>register register value </p>

</div>
</div>
<a id="aace917a03ff13b718feac514d3944f97"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aace917a03ff13b718feac514d3944f97">&sect;&nbsp;</a></span>x4driver_get_xif_register()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyXEP.x4driver_get_xif_register </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>address</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>x4driver_get_xif_register(PyXEP self, uint8_t address) -&gt; uint8_t </p>
<p>Gets XIF register value.</p>
<h2>Returns </h2>
<p>register register value </p>

</div>
</div>
<a id="a3e0428c94e707a3bd1dd3d42c372df51"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3e0428c94e707a3bd1dd3d42c372df51">&sect;&nbsp;</a></span>x4driver_init()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyXEP.x4driver_init </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>x4driver_init(PyXEP self) </p>
<p>Will make sure that enable is set, 8051 SRAM is programmed, ldos are enabled, and that the external oscillator has been enabled. </p>

</div>
</div>
<a id="aec3612495db6fff46220706c4f9c2f4d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aec3612495db6fff46220706c4f9c2f4d">&sect;&nbsp;</a></span>x4driver_set_dac_max()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyXEP.x4driver_set_dac_max </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>dac_max</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>x4driver_set_dac_max(PyXEP self, uint32_t dac_max) </p>
<p>Sets dac max. </p>

</div>
</div>
<a id="abc715caef2f826b94ef3287aa153e79e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abc715caef2f826b94ef3287aa153e79e">&sect;&nbsp;</a></span>x4driver_set_dac_min()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyXEP.x4driver_set_dac_min </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>dac_min</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>x4driver_set_dac_min(PyXEP self, uint32_t dac_min) </p>
<p>Sets dac min. </p>

</div>
</div>
<a id="a1f1a638104855b57c4351a972306b56f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1f1a638104855b57c4351a972306b56f">&sect;&nbsp;</a></span>x4driver_set_dac_step()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyXEP.x4driver_set_dac_step </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>dac_step</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>x4driver_set_dac_step(PyXEP self, uint8_t dac_step) </p>
<p>Sets X4 dac step. </p>

</div>
</div>
<a id="a82524a9b27ab7552d999aa4b81c38cdb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a82524a9b27ab7552d999aa4b81c38cdb">&sect;&nbsp;</a></span>x4driver_set_downconversion()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyXEP.x4driver_set_downconversion </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>enable</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>x4driver_set_downconversion(PyXEP self, uint8_t enable) </p>
<p>Sets downconversion.</p>
<p>0=no downconversion, i.e. rf data. 1=downconversion. </p>

</div>
</div>
<a id="a7a7d6315f79e9e12995a884d393152b9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7a7d6315f79e9e12995a884d393152b9">&sect;&nbsp;</a></span>x4driver_set_enable()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyXEP.x4driver_set_enable </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>x4driver_set_enable(PyXEP self, uint8_t value) </p>
<p>Set enable for X4 enable pin. </p>

</div>
</div>
<a id="a68459e2f2ee2ee0894d7df61c1757c6c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a68459e2f2ee2ee0894d7df61c1757c6c">&sect;&nbsp;</a></span>x4driver_set_fps()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyXEP.x4driver_set_fps </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>fps</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>x4driver_set_fps(PyXEP self, float fps) </p>
<p>Sets frame rate for frame streaming. </p>

</div>
</div>
<a id="ab3ce265886f14f7f376e5d46b0231e0f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab3ce265886f14f7f376e5d46b0231e0f">&sect;&nbsp;</a></span>x4driver_set_frame_area()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyXEP.x4driver_set_frame_area </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>x4driver_set_frame_area(PyXEP self, float start, float end) </p>
<p>Set frame area zone Assume air as transmitter medium.</p>
<p>Start and end in meter. </p>

</div>
</div>
<a id="a1fba61764d7abd07669e750cfe9e6981"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1fba61764d7abd07669e750cfe9e6981">&sect;&nbsp;</a></span>x4driver_set_frame_area_offset()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyXEP.x4driver_set_frame_area_offset </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>offset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>x4driver_set_frame_area_offset(PyXEP self, float offset) </p>
<p>Offset to adjust frame area reference depending on module product. </p>

</div>
</div>
<a id="ae645c78af02a359c9f3112a664f509ca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae645c78af02a359c9f3112a664f509ca">&sect;&nbsp;</a></span>x4driver_set_iterations()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyXEP.x4driver_set_iterations </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>iterations</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>x4driver_set_iterations(PyXEP self, uint32_t iterations) </p>
<p>Sets Iterations. </p>

</div>
</div>
<a id="ac94aba38f8e7df5c5cb16a4378e37037"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac94aba38f8e7df5c5cb16a4378e37037">&sect;&nbsp;</a></span>x4driver_set_pif_register()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyXEP.x4driver_set_pif_register </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>address</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>x4driver_set_pif_register(PyXEP self, uint8_t address, uint8_t value) </p>
<p>Sets PIF register value. </p>

</div>
</div>
<a id="a1107468d06783110614842debf976d46"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1107468d06783110614842debf976d46">&sect;&nbsp;</a></span>x4driver_set_prf_div()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyXEP.x4driver_set_prf_div </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>prf_div</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>x4driver_set_prf_div(PyXEP self, uint8_t prf_div) </p>
<p>Sets Pulse Repetition Frequency(PRF) divider. </p>

</div>
</div>
<a id="adb925124cc48218a36c4085c5fdb83f9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adb925124cc48218a36c4085c5fdb83f9">&sect;&nbsp;</a></span>x4driver_set_pulses_per_step()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyXEP.x4driver_set_pulses_per_step </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>pps</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>x4driver_set_pulses_per_step(PyXEP self, uint32_t pps) </p>
<p>Sets pulses per step. </p>

</div>
</div>
<a id="a81a294b61ffa595ba5d3a36ca7aaa83d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a81a294b61ffa595ba5d3a36ca7aaa83d">&sect;&nbsp;</a></span>x4driver_set_spi_register()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyXEP.x4driver_set_spi_register </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>address</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>x4driver_set_spi_register(PyXEP self, uint8_t address, uint8_t value) </p>
<p>Set spi register on radar chip. </p>

</div>
</div>
<a id="a8d091bb042a22eb510ef2b3bb68fa7f4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8d091bb042a22eb510ef2b3bb68fa7f4">&sect;&nbsp;</a></span>x4driver_set_tx_center_frequency()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyXEP.x4driver_set_tx_center_frequency </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>tx_frequency</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>x4driver_set_tx_center_frequency(PyXEP self, uint8_t tx_frequency) </p>
<p>Set radar TX center frequency. </p>

</div>
</div>
<a id="abcc14bad0b9fa3390d79d42548473afe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abcc14bad0b9fa3390d79d42548473afe">&sect;&nbsp;</a></span>x4driver_set_tx_power()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyXEP.x4driver_set_tx_power </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>tx_power</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>x4driver_set_tx_power(PyXEP self, uint8_t tx_power) </p>
<p>Set the radar transmitter power.</p>
<p>0 = transmitter off. See datasheet for valid values. </p>

</div>
</div>
<a id="a2f1227b5306335abd50e4b41d6bc10f8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2f1227b5306335abd50e4b41d6bc10f8">&sect;&nbsp;</a></span>x4driver_set_xif_register()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyXEP.x4driver_set_xif_register </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>address</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>x4driver_set_xif_register(PyXEP self, uint8_t address, uint8_t value) </p>
<p>Sets XIF register value. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>pymoduleconnector/moduleconnectorwrapper/__init__.py</li>
</ul>
</div><!-- contents -->
<!-- HTML footer for doxygen 1.8.12-->
<!-- start footer part -->
<hr class="footer"/>
 <address class="footer">
 Copyright &copy; 2016 Novelda AS - <a href="http://www.xethru.com">www.xehtru.com</a><br />
 <small>
  Generated by &#160;<a href="http://www.doxygen.org/index.html">
  <img class="footer" src="doxygen.png" alt="doxygen"/>
  </a> 1.8.12
 </small>
 </address>
</body>
</html>

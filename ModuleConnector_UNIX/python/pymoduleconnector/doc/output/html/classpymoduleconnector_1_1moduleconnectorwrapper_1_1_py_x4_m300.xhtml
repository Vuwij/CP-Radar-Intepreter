<!-- HTML header for doxygen 1.8.12-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.12"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>pymoduleconnector: pymoduleconnector.moduleconnectorwrapper.PyX4M300 Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
  <div id="top"><!-- do not remove this div, it is closed by doxygen! -->
    <!-- Platform title -->
    <div class="page-title-bar container-fluid">
      <div id="projectalign" class="row">
        <div id="projectname" class="col-sm-12">pymoduleconnector
          &#160;<span id="projectnumber">1.1.5</span>
        </div>
        <div id="projectbrief" class="col-sm-12">A Python wrapper for XeThru ModuleConnector</div>
      </div>
    </div>
    <div class="topbar">
      <div class="container">
        <div id="titlearea">
          <div class="xethru-logo">
            <img src="xethru-logo_220x55HD.png" alt="Novelda XeThru web site" id="logo-image" />
          </div>
        </div>
        <!-- end header part -->
        <!-- Generated by Doxygen 1.8.12 -->
        <!--BEGIN MAIN-NAV AND SEARCHENGINE-->
        <div id="main-nav"></div>
        <!--END MAIN-NAV AND SEARCHENGINE-->
      </div>
    </div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>pymoduleconnector</b></li><li class="navelem"><b>moduleconnectorwrapper</b></li><li class="navelem"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x4_m300.xhtml">PyX4M300</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x4_m300-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">pymoduleconnector.moduleconnectorwrapper.PyX4M300 Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>C++ includes: PyX4M300.hpp.  
 <a href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x4_m300.xhtml#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a873eeee2d3c2d5485ba82447a96c62cf"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x4_m300.xhtml#a873eeee2d3c2d5485ba82447a96c62cf">__init__</a> (self, radar_interface)</td></tr>
<tr class="memdesc:a873eeee2d3c2d5485ba82447a96c62cf"><td class="mdescLeft">&#160;</td><td class="mdescRight"><b>init</b>(XeThru::PyX4M300 self, RadarInterface &amp; radar_interface) -&gt; <a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x4_m300.xhtml" title="C++ includes: PyX4M300.hpp. ">PyX4M300</a>  <a href="#a873eeee2d3c2d5485ba82447a96c62cf">More...</a><br /></td></tr>
<tr class="separator:a873eeee2d3c2d5485ba82447a96c62cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a085ffc4ab0640ab87c848059467d003f"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x4_m300.xhtml#a085ffc4ab0640ab87c848059467d003f">set_debug_level</a> (self, level)</td></tr>
<tr class="memdesc:a085ffc4ab0640ab87c848059467d003f"><td class="mdescLeft">&#160;</td><td class="mdescRight">set_debug_level(PyX4M300 self, unsigned char level)  <a href="#a085ffc4ab0640ab87c848059467d003f">More...</a><br /></td></tr>
<tr class="separator:a085ffc4ab0640ab87c848059467d003f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4a434fb77c7b722316a7dfe9cb10f55"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x4_m300.xhtml#ab4a434fb77c7b722316a7dfe9cb10f55">ping</a> (self)</td></tr>
<tr class="memdesc:ab4a434fb77c7b722316a7dfe9cb10f55"><td class="mdescLeft">&#160;</td><td class="mdescRight">ping(PyX4M300 self) -&gt; uint32_t  <a href="#ab4a434fb77c7b722316a7dfe9cb10f55">More...</a><br /></td></tr>
<tr class="separator:ab4a434fb77c7b722316a7dfe9cb10f55"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a358163cbc1dd10fa30679d7985db4d8e"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x4_m300.xhtml#a358163cbc1dd10fa30679d7985db4d8e">get_system_info</a> (self, info_code)</td></tr>
<tr class="memdesc:a358163cbc1dd10fa30679d7985db4d8e"><td class="mdescLeft">&#160;</td><td class="mdescRight">get_system_info(PyX4M300 self, uint8_t const info_code) -&gt; std::string  <a href="#a358163cbc1dd10fa30679d7985db4d8e">More...</a><br /></td></tr>
<tr class="separator:a358163cbc1dd10fa30679d7985db4d8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae708c7b6f659138aebca25cab6dd324f"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x4_m300.xhtml#ae708c7b6f659138aebca25cab6dd324f">module_reset</a> (self)</td></tr>
<tr class="memdesc:ae708c7b6f659138aebca25cab6dd324f"><td class="mdescLeft">&#160;</td><td class="mdescRight">module_reset(PyX4M300 self)  <a href="#ae708c7b6f659138aebca25cab6dd324f">More...</a><br /></td></tr>
<tr class="separator:ae708c7b6f659138aebca25cab6dd324f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2209379a8d5e0c4d24032b8d1a1ea5fd"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x4_m300.xhtml#a2209379a8d5e0c4d24032b8d1a1ea5fd">reset</a> (self)</td></tr>
<tr class="memdesc:a2209379a8d5e0c4d24032b8d1a1ea5fd"><td class="mdescLeft">&#160;</td><td class="mdescRight">reset(PyX4M300 self) -&gt; int  <a href="#a2209379a8d5e0c4d24032b8d1a1ea5fd">More...</a><br /></td></tr>
<tr class="separator:a2209379a8d5e0c4d24032b8d1a1ea5fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4f26481fe14f8b2d18664d87a4b84b3"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x4_m300.xhtml#ae4f26481fe14f8b2d18664d87a4b84b3">start_bootloader</a> (self)</td></tr>
<tr class="memdesc:ae4f26481fe14f8b2d18664d87a4b84b3"><td class="mdescLeft">&#160;</td><td class="mdescRight">start_bootloader(PyX4M300 self)  <a href="#ae4f26481fe14f8b2d18664d87a4b84b3">More...</a><br /></td></tr>
<tr class="separator:ae4f26481fe14f8b2d18664d87a4b84b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a142cc1bff05a309bca9188a647a5cbe7"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x4_m300.xhtml#a142cc1bff05a309bca9188a647a5cbe7">system_run_test</a> (self, testcode, data)</td></tr>
<tr class="memdesc:a142cc1bff05a309bca9188a647a5cbe7"><td class="mdescLeft">&#160;</td><td class="mdescRight">system_run_test(PyX4M300 self, uint8_t const testcode, ucVector data) -&gt; int  <a href="#a142cc1bff05a309bca9188a647a5cbe7">More...</a><br /></td></tr>
<tr class="separator:a142cc1bff05a309bca9188a647a5cbe7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a745a53c0deebad64c6c2d7d6ea9fc0bb"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x4_m300.xhtml#a745a53c0deebad64c6c2d7d6ea9fc0bb">load_profile</a> (self, profileid)</td></tr>
<tr class="memdesc:a745a53c0deebad64c6c2d7d6ea9fc0bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">load_profile(PyX4M300 self, uint32_t const profileid)  <a href="#a745a53c0deebad64c6c2d7d6ea9fc0bb">More...</a><br /></td></tr>
<tr class="separator:a745a53c0deebad64c6c2d7d6ea9fc0bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a330df328fb76fd7901e76311131a3863"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x4_m300.xhtml#a330df328fb76fd7901e76311131a3863">set_sensor_mode</a> (self, mode, param)</td></tr>
<tr class="memdesc:a330df328fb76fd7901e76311131a3863"><td class="mdescLeft">&#160;</td><td class="mdescRight">set_sensor_mode(PyX4M300 self, uint8_t const mode, uint8_t const param)  <a href="#a330df328fb76fd7901e76311131a3863">More...</a><br /></td></tr>
<tr class="separator:a330df328fb76fd7901e76311131a3863"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe4daf3e2750c49421e4c0cb193d7eb8"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x4_m300.xhtml#afe4daf3e2750c49421e4c0cb193d7eb8">set_sensitivity</a> (self, sensitivity)</td></tr>
<tr class="memdesc:afe4daf3e2750c49421e4c0cb193d7eb8"><td class="mdescLeft">&#160;</td><td class="mdescRight">set_sensitivity(PyX4M300 self, uint32_t const sensitivity)  <a href="#afe4daf3e2750c49421e4c0cb193d7eb8">More...</a><br /></td></tr>
<tr class="separator:afe4daf3e2750c49421e4c0cb193d7eb8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adbf23c82bc1db62ea2960e16a1355040"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x4_m300.xhtml#adbf23c82bc1db62ea2960e16a1355040">set_detection_zone</a> (self, start, end)</td></tr>
<tr class="memdesc:adbf23c82bc1db62ea2960e16a1355040"><td class="mdescLeft">&#160;</td><td class="mdescRight">set_detection_zone(PyX4M300 self, float const start, float const end)  <a href="#adbf23c82bc1db62ea2960e16a1355040">More...</a><br /></td></tr>
<tr class="separator:adbf23c82bc1db62ea2960e16a1355040"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9bb9b53f33af8a80d06d353893ca181"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x4_m300.xhtml#aa9bb9b53f33af8a80d06d353893ca181">get_detection_zone</a> (self)</td></tr>
<tr class="memdesc:aa9bb9b53f33af8a80d06d353893ca181"><td class="mdescLeft">&#160;</td><td class="mdescRight">get_detection_zone(PyX4M300 self) -&gt; <a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_detection_zone.xhtml" title="Representation of the detection zone. ">DetectionZone</a>  <a href="#aa9bb9b53f33af8a80d06d353893ca181">More...</a><br /></td></tr>
<tr class="separator:aa9bb9b53f33af8a80d06d353893ca181"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd9819f3280ad70c955acfdf0e04504a"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x4_m300.xhtml#acd9819f3280ad70c955acfdf0e04504a">get_detection_zone_limits</a> (self)</td></tr>
<tr class="memdesc:acd9819f3280ad70c955acfdf0e04504a"><td class="mdescLeft">&#160;</td><td class="mdescRight">get_detection_zone_limits(PyX4M300 self) -&gt; <a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_detection_zone_limits.xhtml" title="Is an aggrgation of parameters used to represent the detection zone limits. ">DetectionZoneLimits</a>  <a href="#acd9819f3280ad70c955acfdf0e04504a">More...</a><br /></td></tr>
<tr class="separator:acd9819f3280ad70c955acfdf0e04504a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a083234422dfa614a412b9f42b30ac6e5"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x4_m300.xhtml#a083234422dfa614a412b9f42b30ac6e5">set_led_control</a> (self, mode, intensity)</td></tr>
<tr class="memdesc:a083234422dfa614a412b9f42b30ac6e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">set_led_control(PyX4M300 self, uint8_t const mode, uint8_t intensity)  <a href="#a083234422dfa614a412b9f42b30ac6e5">More...</a><br /></td></tr>
<tr class="separator:a083234422dfa614a412b9f42b30ac6e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afa5f8502b525d703418b815c08c767a4"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x4_m300.xhtml#afa5f8502b525d703418b815c08c767a4">set_output_control</a> (self, output_feature, output_control)</td></tr>
<tr class="memdesc:afa5f8502b525d703418b815c08c767a4"><td class="mdescLeft">&#160;</td><td class="mdescRight">set_output_control(PyX4M300 self, uint32_t const output_feature, uint32_t const output_control)  <a href="#afa5f8502b525d703418b815c08c767a4">More...</a><br /></td></tr>
<tr class="separator:afa5f8502b525d703418b815c08c767a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac4031dfc7c29c40615a2f947752e9a6e"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x4_m300.xhtml#ac4031dfc7c29c40615a2f947752e9a6e">peek_message_presence_single</a> (self)</td></tr>
<tr class="memdesc:ac4031dfc7c29c40615a2f947752e9a6e"><td class="mdescLeft">&#160;</td><td class="mdescRight">peek_message_presence_single(PyX4M300 self) -&gt; int  <a href="#ac4031dfc7c29c40615a2f947752e9a6e">More...</a><br /></td></tr>
<tr class="separator:ac4031dfc7c29c40615a2f947752e9a6e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa2ada346650ef99eb0fe9ea96d690e3"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x4_m300.xhtml#aaa2ada346650ef99eb0fe9ea96d690e3">read_message_presence_single</a> (self)</td></tr>
<tr class="memdesc:aaa2ada346650ef99eb0fe9ea96d690e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">read_message_presence_single(PyX4M300 self) -&gt; PresenceSingleData  <a href="#aaa2ada346650ef99eb0fe9ea96d690e3">More...</a><br /></td></tr>
<tr class="separator:aaa2ada346650ef99eb0fe9ea96d690e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47634fb51ba9c6574478bcbb8a3bb7f7"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x4_m300.xhtml#a47634fb51ba9c6574478bcbb8a3bb7f7">peek_message_presence_movinglist</a> (self)</td></tr>
<tr class="memdesc:a47634fb51ba9c6574478bcbb8a3bb7f7"><td class="mdescLeft">&#160;</td><td class="mdescRight">peek_message_presence_movinglist(PyX4M300 self) -&gt; int  <a href="#a47634fb51ba9c6574478bcbb8a3bb7f7">More...</a><br /></td></tr>
<tr class="separator:a47634fb51ba9c6574478bcbb8a3bb7f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4285cf9d408eaca6ee5d67b3e0d33dcc"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x4_m300.xhtml#a4285cf9d408eaca6ee5d67b3e0d33dcc">read_message_presence_movinglist</a> (self)</td></tr>
<tr class="memdesc:a4285cf9d408eaca6ee5d67b3e0d33dcc"><td class="mdescLeft">&#160;</td><td class="mdescRight">read_message_presence_movinglist(PyX4M300 self) -&gt; PresenceMovingListData  <a href="#a4285cf9d408eaca6ee5d67b3e0d33dcc">More...</a><br /></td></tr>
<tr class="separator:a4285cf9d408eaca6ee5d67b3e0d33dcc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a27b4ecdc8039088f0cd8e97ce26296f6"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x4_m300.xhtml#a27b4ecdc8039088f0cd8e97ce26296f6">peek_message_baseband_ap</a> (self)</td></tr>
<tr class="memdesc:a27b4ecdc8039088f0cd8e97ce26296f6"><td class="mdescLeft">&#160;</td><td class="mdescRight">peek_message_baseband_ap(PyX4M300 self) -&gt; int  <a href="#a27b4ecdc8039088f0cd8e97ce26296f6">More...</a><br /></td></tr>
<tr class="separator:a27b4ecdc8039088f0cd8e97ce26296f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb74a781f50c83a6c79ee9647c6f37a2"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x4_m300.xhtml#aeb74a781f50c83a6c79ee9647c6f37a2">read_message_baseband_ap</a> (self)</td></tr>
<tr class="memdesc:aeb74a781f50c83a6c79ee9647c6f37a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">read_message_baseband_ap(PyX4M300 self) -&gt; <a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_baseband_ap_data.xhtml" title="Represents amplitude phase baseband data coming from the module. ">BasebandApData</a>  <a href="#aeb74a781f50c83a6c79ee9647c6f37a2">More...</a><br /></td></tr>
<tr class="separator:aeb74a781f50c83a6c79ee9647c6f37a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a100dc5ca302556fe28878a50747118ac"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x4_m300.xhtml#a100dc5ca302556fe28878a50747118ac">peek_message_baseband_iq</a> (self)</td></tr>
<tr class="memdesc:a100dc5ca302556fe28878a50747118ac"><td class="mdescLeft">&#160;</td><td class="mdescRight">peek_message_baseband_iq(PyX4M300 self) -&gt; int  <a href="#a100dc5ca302556fe28878a50747118ac">More...</a><br /></td></tr>
<tr class="separator:a100dc5ca302556fe28878a50747118ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37a8e78bd1339fe62929623df1870012"><td class="memItemLeft" align="right" valign="top">def&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x4_m300.xhtml#a37a8e78bd1339fe62929623df1870012">read_message_baseband_iq</a> (self)</td></tr>
<tr class="memdesc:a37a8e78bd1339fe62929623df1870012"><td class="mdescLeft">&#160;</td><td class="mdescRight">read_message_baseband_iq(PyX4M300 self) -&gt; <a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_baseband_iq_data.xhtml" title="Represents I/Q baseband data coming from the module. ">BasebandIqData</a>  <a href="#a37a8e78bd1339fe62929623df1870012">More...</a><br /></td></tr>
<tr class="separator:a37a8e78bd1339fe62929623df1870012"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr class="memitem:a65497d17f6bcfa798d99b42335ec6a65"><td class="memItemLeft" align="right" valign="top"><a id="a65497d17f6bcfa798d99b42335ec6a65"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>this</b></td></tr>
<tr class="separator:a65497d17f6bcfa798d99b42335ec6a65"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>C++ includes: PyX4M300.hpp. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a873eeee2d3c2d5485ba82447a96c62cf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a873eeee2d3c2d5485ba82447a96c62cf">&sect;&nbsp;</a></span>__init__()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX4M300.__init__ </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>radar_interface</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p><b>init</b>(XeThru::PyX4M300 self, RadarInterface &amp; radar_interface) -&gt; <a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_py_x4_m300.xhtml" title="C++ includes: PyX4M300.hpp. ">PyX4M300</a> </p>
<p>Constructor.</p>
<h2>Parameters </h2>
<ul>
<li><code>internale</code> : object used to interface the radar </li>
</ul>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="aa9bb9b53f33af8a80d06d353893ca181"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa9bb9b53f33af8a80d06d353893ca181">&sect;&nbsp;</a></span>get_detection_zone()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX4M300.get_detection_zone </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>get_detection_zone(PyX4M300 self) -&gt; <a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_detection_zone.xhtml" title="Representation of the detection zone. ">DetectionZone</a> </p>
<p>Returns the actual range window.</p>
<h2>Returns </h2>
<p>detection_zone </p>

</div>
</div>
<a id="acd9819f3280ad70c955acfdf0e04504a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acd9819f3280ad70c955acfdf0e04504a">&sect;&nbsp;</a></span>get_detection_zone_limits()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX4M300.get_detection_zone_limits </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>get_detection_zone_limits(PyX4M300 self) -&gt; <a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_detection_zone_limits.xhtml" title="Is an aggrgation of parameters used to represent the detection zone limits. ">DetectionZoneLimits</a> </p>
<p>Returns the potential settings of detection zone from the module.</p>
<h2>Returns </h2>
<p><a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_detection_zone_limits.xhtml" title="Is an aggrgation of parameters used to represent the detection zone limits. ">DetectionZoneLimits</a> </p>

</div>
</div>
<a id="a358163cbc1dd10fa30679d7985db4d8e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a358163cbc1dd10fa30679d7985db4d8e">&sect;&nbsp;</a></span>get_system_info()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX4M300.get_system_info </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>info_code</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>get_system_info(PyX4M300 self, uint8_t const info_code) -&gt; std::string </p>
<p>Returns a string containing system information given by infocode: XTID_SSIC_ITEMNUMBER = 0x00 -&gt; Returns the internal Novelda PCBA Item Number, including revision.</p>
<p>This is programmed in Flash during manufacturing XTID_SSIC_ORDERCODE = 0x01 -&gt; Returns the PCBA / PCBA stack order code. XTID_SSIC_FIRMWAREID = 0x02 -&gt; Returns the installed Firmware ID. As viewed from the "highest" level of the software, "X4M300". XTID_SSIC_VERSION = 0x03 -&gt; Returns the installed Firmware Version. As viewed from the "highest" level of the software. XTID_SSIC_BUILD = 0x04 -&gt; Returns information of the SW Build installed on the device XTID_SSIC_SERIALNUMBER = 0x06 -&gt; Returns the PCBA serial number XTID_SSIC_VERSIONLIST = 0x07 -&gt; Returns ID and version of all components. Calls all components and compound a string. E.g. "X4M300:1.0.0.3;XEP:2.3.4.5;X4C51:1.0.0.0;DSP:1.1.1.1" </p>

</div>
</div>
<a id="a745a53c0deebad64c6c2d7d6ea9fc0bb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a745a53c0deebad64c6c2d7d6ea9fc0bb">&sect;&nbsp;</a></span>load_profile()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX4M300.load_profile </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>profileid</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>load_profile(PyX4M300 self, uint32_t const profileid) </p>
<p>Loads the presence profile.</p>
<p>If another profile is loaded, the other profile is unloaded before the presence profile is loaded. The profile does not start, the module remains idle. profile = 0x014d4ab8 : presence profile</p>
<h2>Parameters </h2>
<ul>
<li><code>profileid</code> : the id of the profile to load </li>
</ul>

</div>
</div>
<a id="ae708c7b6f659138aebca25cab6dd324f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae708c7b6f659138aebca25cab6dd324f">&sect;&nbsp;</a></span>module_reset()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX4M300.module_reset </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>module_reset(PyX4M300 self) </p>
<p>Resets and restart the module.</p>
<p>The client must perform a close and then an open on the ModuleConnector to reeastablish connection. </p>

</div>
</div>
<a id="a27b4ecdc8039088f0cd8e97ce26296f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a27b4ecdc8039088f0cd8e97ce26296f6">&sect;&nbsp;</a></span>peek_message_baseband_ap()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX4M300.peek_message_baseband_ap </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>peek_message_baseband_ap(PyX4M300 self) -&gt; int </p>
<p>Return number of messages available.</p>
<h2>Returns </h2>
<p>: size: number og messages in buffer </p>

</div>
</div>
<a id="a100dc5ca302556fe28878a50747118ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a100dc5ca302556fe28878a50747118ac">&sect;&nbsp;</a></span>peek_message_baseband_iq()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX4M300.peek_message_baseband_iq </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>peek_message_baseband_iq(PyX4M300 self) -&gt; int </p>
<p>Return number of messages available.</p>
<h2>Returns </h2>
<p>: size: number og messages in buffer </p>

</div>
</div>
<a id="a47634fb51ba9c6574478bcbb8a3bb7f7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a47634fb51ba9c6574478bcbb8a3bb7f7">&sect;&nbsp;</a></span>peek_message_presence_movinglist()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX4M300.peek_message_presence_movinglist </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>peek_message_presence_movinglist(PyX4M300 self) -&gt; int </p>
<p>Return number of messages available.</p>
<h2>Returns </h2>
<p>: size: number og messages in buffer </p>

</div>
</div>
<a id="ac4031dfc7c29c40615a2f947752e9a6e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac4031dfc7c29c40615a2f947752e9a6e">&sect;&nbsp;</a></span>peek_message_presence_single()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX4M300.peek_message_presence_single </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>peek_message_presence_single(PyX4M300 self) -&gt; int </p>
<p>Return number of messages available.</p>
<h2>Returns </h2>
<p>: size: number og messages in buffer </p>

</div>
</div>
<a id="ab4a434fb77c7b722316a7dfe9cb10f55"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab4a434fb77c7b722316a7dfe9cb10f55">&sect;&nbsp;</a></span>ping()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX4M300.ping </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>ping(PyX4M300 self) -&gt; uint32_t </p>
<p>Make sure there is a connection to FW on the Xethru X4M300 module.</p>
<h2>Returns </h2>
<p>pong </p>

</div>
</div>
<a id="aeb74a781f50c83a6c79ee9647c6f37a2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeb74a781f50c83a6c79ee9647c6f37a2">&sect;&nbsp;</a></span>read_message_baseband_ap()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX4M300.read_message_baseband_ap </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>read_message_baseband_ap(PyX4M300 self) -&gt; <a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_baseband_ap_data.xhtml" title="Represents amplitude phase baseband data coming from the module. ">BasebandApData</a> </p>
<p>Read a single <a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_baseband_ap_data.xhtml" title="Represents amplitude phase baseband data coming from the module. ">BasebandApData</a> item from the queue.</p>
<p>Blocks if queue is empty.</p>
<h2>Returns </h2>
<p>baseband_ap </p>

</div>
</div>
<a id="a37a8e78bd1339fe62929623df1870012"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37a8e78bd1339fe62929623df1870012">&sect;&nbsp;</a></span>read_message_baseband_iq()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX4M300.read_message_baseband_iq </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>read_message_baseband_iq(PyX4M300 self) -&gt; <a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_baseband_iq_data.xhtml" title="Represents I/Q baseband data coming from the module. ">BasebandIqData</a> </p>
<p>Read a single <a class="el" href="classpymoduleconnector_1_1moduleconnectorwrapper_1_1_baseband_iq_data.xhtml" title="Represents I/Q baseband data coming from the module. ">BasebandIqData</a> item from the queue.</p>
<p>Blocks if queue is empty.</p>
<h2>Returns </h2>
<p>baseband_qi </p>

</div>
</div>
<a id="a4285cf9d408eaca6ee5d67b3e0d33dcc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4285cf9d408eaca6ee5d67b3e0d33dcc">&sect;&nbsp;</a></span>read_message_presence_movinglist()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX4M300.read_message_presence_movinglist </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>read_message_presence_movinglist(PyX4M300 self) -&gt; PresenceMovingListData </p>
<p>Read a single PresenceMovingList item from the queue.</p>
<p>Blocks if queue is empty.</p>
<h2>Returns </h2>
<p>presence_moving_list </p>

</div>
</div>
<a id="aaa2ada346650ef99eb0fe9ea96d690e3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaa2ada346650ef99eb0fe9ea96d690e3">&sect;&nbsp;</a></span>read_message_presence_single()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX4M300.read_message_presence_single </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>read_message_presence_single(PyX4M300 self) -&gt; PresenceSingleData </p>
<p>Read a single PresenceSingleData item from the queue.</p>
<p>Blocks if queue is empty.</p>
<h2>Returns </h2>
<p>presence_single </p>

</div>
</div>
<a id="a2209379a8d5e0c4d24032b8d1a1ea5fd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2209379a8d5e0c4d24032b8d1a1ea5fd">&sect;&nbsp;</a></span>reset()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX4M300.reset </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>reset(PyX4M300 self) -&gt; int </p>
<p>Resets and restart the module.</p>
<p>This method automatically reestablishes. </p>

</div>
</div>
<a id="a085ffc4ab0640ab87c848059467d003f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a085ffc4ab0640ab87c848059467d003f">&sect;&nbsp;</a></span>set_debug_level()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX4M300.set_debug_level </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>level</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>set_debug_level(PyX4M300 self, unsigned char level) </p>
<p>Sets debug level in the Xethru module.</p>
<h2>Parameters </h2>
<ul>
<li><code>level</code> : New debug level. Legal range [0-9]. </li>
</ul>

</div>
</div>
<a id="adbf23c82bc1db62ea2960e16a1355040"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adbf23c82bc1db62ea2960e16a1355040">&sect;&nbsp;</a></span>set_detection_zone()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX4M300.set_detection_zone </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>set_detection_zone(PyX4M300 self, float const start, float const end) </p>
<p>Sets the current detection zone.</p>
<p>Rules See datasheet. The actual detection zone is determined by radar settings. Use the get_detection_zone command to get the actual values</p>
<h2>Parameters </h2>
<ul>
<li><code>start</code> :</li>
<li><code>end</code> : </li>
</ul>

</div>
</div>
<a id="a083234422dfa614a412b9f42b30ac6e5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a083234422dfa614a412b9f42b30ac6e5">&sect;&nbsp;</a></span>set_led_control()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX4M300.set_led_control </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>intensity</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>set_led_control(PyX4M300 self, uint8_t const mode, uint8_t intensity) </p>
<p>This command configures the LED mode.</p>
<p>The setting survives a power cycle. mode = 0 : OFF mode = 1 : simple mode = 2 : full (default) Intensity: Future use, 0=low, 100=high</p>
<h2>Parameters </h2>
<ul>
<li><code>mode</code> :</li>
<li><code>intensity</code> : </li>
</ul>

</div>
</div>
<a id="afa5f8502b525d703418b815c08c767a4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afa5f8502b525d703418b815c08c767a4">&sect;&nbsp;</a></span>set_output_control()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX4M300.set_output_control </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>output_feature</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>output_control</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>set_output_control(PyX4M300 self, uint32_t const output_feature, uint32_t const output_control) </p>
<p>Control module profile output.</p>
<p>Enable and disable data messages. Several calls can be made, one for each available output message the profile provides.</p>
<h2>Parameters </h2>
<ul>
<li><code>output_feature</code> : PresenceSingle PresenceMovingList PresenceStaticList BasebandIQ BasebandAP PulseDoppler</li>
<li><code>output_control</code> : 0 = disable &gt;0 = enable + format. E.g. pulsedoppler output data byte or float </li>
</ul>

</div>
</div>
<a id="afe4daf3e2750c49421e4c0cb193d7eb8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe4daf3e2750c49421e4c0cb193d7eb8">&sect;&nbsp;</a></span>set_sensitivity()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX4M300.set_sensitivity </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>sensitivity</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>set_sensitivity(PyX4M300 self, uint32_t const sensitivity) </p>
<p>Sets the overall sensitivity.</p>
<h2>Parameters </h2>
<ul>
<li><code>sensitivity</code> : : 0 to 9, 0 = low, 9 = high </li>
</ul>

</div>
</div>
<a id="a330df328fb76fd7901e76311131a3863"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a330df328fb76fd7901e76311131a3863">&sect;&nbsp;</a></span>set_sensor_mode()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX4M300.set_sensor_mode </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>param</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>set_sensor_mode(PyX4M300 self, uint8_t const mode, uint8_t const param) </p>
<p>Modes Run - Run profile application Idle - Halts profile application, can be Run again.</p>
<p>Stop Stop profile application Manual - Interact directly with XDriver, i.e. allow streaming directly to host Param: Not used, ignored, can be 0.</p>
<h2>Parameters </h2>
<ul>
<li><code>mode</code> :</li>
<li><code>param</code> : ignored </li>
</ul>

</div>
</div>
<a id="ae4f26481fe14f8b2d18664d87a4b84b3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae4f26481fe14f8b2d18664d87a4b84b3">&sect;&nbsp;</a></span>start_bootloader()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX4M300.start_bootloader </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>start_bootloader(PyX4M300 self) </p>
<p>Enters the bootloader for FW upgrades. </p>

</div>
</div>
<a id="a142cc1bff05a309bca9188a647a5cbe7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a142cc1bff05a309bca9188a647a5cbe7">&sect;&nbsp;</a></span>system_run_test()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def pymoduleconnector.moduleconnectorwrapper.PyX4M300.system_run_test </td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>testcode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>data</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>system_run_test(PyX4M300 self, uint8_t const testcode, ucVector data) -&gt; int </p>
<p>Runs the different manufacturing tests identified by testcode.</p>
<p>Can return any number of results depending on test_mode. Host must know how to parse test results.</p>
<h2>Parameters </h2>
<ul>
<li><code>testcode</code> :</li>
<li><code>data</code> : </li>
</ul>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>pymoduleconnector/moduleconnectorwrapper/__init__.py</li>
</ul>
</div><!-- contents -->
<!-- HTML footer for doxygen 1.8.12-->
<!-- start footer part -->
<hr class="footer"/>
 <address class="footer">
 Copyright &copy; 2016 Novelda AS - <a href="http://www.xethru.com">www.xehtru.com</a><br />
 <small>
  Generated by &#160;<a href="http://www.doxygen.org/index.html">
  <img class="footer" src="doxygen.png" alt="doxygen"/>
  </a> 1.8.12
 </small>
 </address>
</body>
</html>

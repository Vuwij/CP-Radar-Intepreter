function [bb_data] = downconvert(rf_data, Fc)

    if Fc==3
        Fc=7.29e9;
    end
    if Fc==4
        Fc=8.748e9;
    end
    
    N=length(rf_data);
    Fs=23.328e9;
    
    %Obtain time domain t axis
    t = (1/Fs)*(1:Nsamps);        
    
    %First obtain the frequency spectrum of the time domain rf data
    rf_data_fft=abs(fft(rf_data));
    rf_data_fft = rf_data_fft(1:N/2); %Discard Half of Points
    f = Fs*(0:N/2-1)/N; %Prepare freq data for plot
    
    %Obtaining the baseband signal
    hilbertTransform=imag(hilbert(rf_data));
    basebandImag = hilbertTransform.*cos(2 * pi *Fc*t)-np.multiply(timeDomainSignalY,np.sin(2 * np.pi *centerFreq*timeDomainSignalX)
    basebandReal = np.multiply(timeDomainSignalY, np.cos(2 * np.pi * centerFreq * timeDomainSignalX)) + np.multiply(hilbertTransform, np.sin(2 * np.pi * centerFreq * timeDomainSignalX))
    
    %Create a downconverter with a decimation factor of 2
    dwnConv = dsp.DigitalDownConverter(...
      'SampleRate',23.328e9,...
      'DecimationFactor',2,...
      'Bandwidth',1.5e9,...
      'PassbandRipple',0.05,...
      'StopbandAttenuation',60,...
      'StopbandFrequencySource', 'Property',...
      'StopbandFrequency',1.5e9,...
      'CenterFrequency',Fc);
  
  bb_data=dwnConv(rf_data');

end

